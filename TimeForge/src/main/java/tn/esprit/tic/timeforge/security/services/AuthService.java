package tn.esprit.tic.timeforge.security.services;

import lombok.AllArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import tn.esprit.tic.timeforge.Entity.*;
import tn.esprit.tic.timeforge.Payload.Request.LoginRequest;
import tn.esprit.tic.timeforge.Payload.Request.RegisterRequest;
import tn.esprit.tic.timeforge.Payload.Response.LoginResponse;
import tn.esprit.tic.timeforge.Reposotory.RoleRepo;
import tn.esprit.tic.timeforge.Reposotory.UserRepo;
import tn.esprit.tic.timeforge.security.jwt.JwtUtils;
import tn.esprit.tic.timeforge.utils.EmailService;

@Service
@AllArgsConstructor
public class AuthService {

    private AuthenticationManager authenticationManager;

    private UserRepo userRepo;

    private RoleRepo roleRepo;// Votre UserRepo pour acc√©der aux donn√©es utilisateur


    private JwtUtils jwtUtils;


    private UserDetailsService userDetailsService;
    private EmailService emailService;


    private BCryptPasswordEncoder passwordEncoder ;

    // M√©thode pour l'authentification des utilisateurs et la g√©n√©ration du JWT
    public LoginResponse authenticateUser(LoginRequest loginRequest) {
        // Authentification de l'utilisateur
        Authentication authentication = authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(
                        loginRequest.getUsername(),
                        loginRequest.getPassword()
                )
        );

        // R√©cup√©rer les d√©tails de l'utilisateur authentifi√©
        UserDetails userDetails = (UserDetails) authentication.getPrincipal();

        // G√©n√©rer un JWT avec le nom d'utilisateur et le r√¥le
        String jwt = jwtUtils.generateJwtToken(userDetails.getUsername(), userDetails.getAuthorities());

        return new LoginResponse(jwt);
    }

    // M√©thode pour l'enregistrement d'un nouvel utilisateur
    // M√©thode pour l'enregistrement d'un nouvel utilisateur
    public boolean registerUser(RegisterRequest registerRequest) {
        // V√©rifier si le nom d'utilisateur existe d√©j√†
        if (userRepo.existsByUsername(registerRequest.getUsername())) {
            System.err.println("Username already exists");
            return false; // Nom d'utilisateur d√©j√† existant
        }

        // V√©rifier si l'e-mail existe d√©j√†
        if (userRepo.existsByMail(registerRequest.getEmail())) {
            System.err.println("Email already exists");
            return false; // E-mail d√©j√† existant
        }

        // Cr√©er un nouvel utilisateur selon le r√¥le
        User newUser;
        switch (registerRequest.getRole().toUpperCase()) {
            case "TEAM_LEAD":
                newUser = new Teamlead();
                break;
            case "SUPERVISOR":
                newUser = new Supervisor();
                break;
            case "EMPLOYEE":
                newUser = new Employee();
                break;
            default:
                return false; // R√¥le non valide
        }

        // ‚úÖ Remplir les champs de l'utilisateur
        newUser.setUsername(registerRequest.getUsername());
        newUser.setMail(registerRequest.getEmail());
        newUser.setPassword(passwordEncoder.encode(registerRequest.getPassword())); // üîê Hash du mot de passe
        newUser.setConfirme(false); // Par d√©faut, l'utilisateur n'est pas confirm√©
        Role role = roleRepo.findByName(registerRequest.getRole().toUpperCase());

        if (role == null) {
            return false; // R√¥le non trouv√© en BDD
        }

        newUser.setRole(role); // ‚úÖ Assigne le r√¥le √† l'utilisateur


        // ‚úÖ Sauvegarder l'utilisateur dans la base de donn√©es
        newUser.setPhoto("hello");
        userRepo.save(newUser);
        return true;
    }


    // M√©thode pour la r√©initialisation du mot de passe (si n√©cessaire)
    public boolean resetPassword(String email) {
        // Trouver l'utilisateur par email
        User user = userRepo.findFirstByMail(email);

        if (user == null) {
            return false; // Utilisateur non trouv√©
        }

        // G√©n√©rer un token de r√©initialisation ou un lien (ici un token)
        String resetToken = jwtUtils.generateJwtToken(user.getUsername(), user.getAuthorities());

        // Cr√©er le contenu du mail de r√©initialisation
        String resetLink = "http://localhost:8080/api/auth/reset-password?token=" + resetToken;
        String emailContent = "Cliquez sur le lien ci-dessous pour r√©initialiser votre mot de passe:\n" + resetLink;

        // Cr√©er l'objet Mail
        Mail mail = new Mail();
        mail.setSubject("R√©initialisation du mot de passe");
        mail.setContent(emailContent);
        mail.setTo(user.getMail());
        mail.setFrom("no-reply@yourapp.com");

        // Envoyer l'email via le service d'email
        emailService.sendSimpleMessage(mail);

        return true; // R√©initialisation r√©ussie
    }

    // M√©thode pour la gestion de la d√©connexion
    public void logout() {
        // Logique de d√©connexion : ici, cela peut √™tre juste une invalidation du token c√¥t√© client
        // Spring Security g√®re d√©j√† la suppression du contexte d'authentification apr√®s la d√©connexion.
    }
}